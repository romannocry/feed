import base64
import json
from typing import Dict
import datetime
from notification import notification as InputLog
#import requests


def get_user_from_token(token: str) -> str:
    """Placeholder for user retrieval logic."""
    
    # In a real implementation, retrieve user info based on the token
    return "test@gmail.com"

def post_to_storage(storage_url: str, data: Dict) -> None:
    """Placeholder for posting data to a storage URL."""
    print(f"Storing data to {storage_url}: {data}")
    # In a real implementation, use requests or another HTTP library to POST the data
    
def authenticate(token: str, validators: list) -> str:
    """Authenticate and return the authenticated user's email."""
    user_email = get_user_from_token(token)
    if user_email not in validators:
        raise ValueError("Authentication failed: user not in validators")
    return user_email

def decode_payload(b64payload: str) -> Dict:
    """Decode a base64-encoded JSON payload."""
    # Add padding if needed
    missing_padding = len(b64payload) % 4
    if missing_padding:
        b64payload += '=' * (4 - missing_padding)
    decoded_bytes = base64.urlsafe_b64decode(b64payload)
    payload = json.loads(decoded_bytes.decode("utf-8"))
    return payload

def process_payload(payload: Dict) -> Dict:
    """Process the payload dictionary as needed."""
    # Example processing: just return the payload for now
    print("Processing payload:", payload)
    print("authenticating...")
    user = authenticate(token="123",validators=payload.get("validators"))
    print("converting payload to csv row...")

    payload_to_store = InputLog(
        uuid=payload.get("uuid"),
        user_email=user,
        key=payload.get("key"),
        value=payload.get("value"),
        context=payload.get("context", {}),
        modified_date=int(datetime.datetime.now().timestamp())
    )
    print("converting payload to csv row...")
    print("csv row:", payload_to_store.to_csv_row())
    
    print("storing...")
    if storage := payload.get("storage"):
        post_to_storage(payload.get("storage"),payload_to_store.to_csv_row())
    if triggerOnSuccess := payload.get("triggerOnSuccess"):
        print("triggering on success...")
        if triggerOnSuccess.get("method") == "POST":
            #response = requests.post(triggerOnSuccess.get("api"), json=triggerOnSuccess.get("params", {}))
            print(f"Triggered {triggerOnSuccess.get('api')} with response code ")#{response.status_code}")
        # Add handling for other methods (GET, PUT, etc.) as needed
    return {"status": "success"}


# Example usage:
if __name__ == "__main__":
    # Example: use a payload generated by your generator
    b64payload = "eyJ1dWlkIjogIjk5OThjYjNkLWQ3OGQtNGFjZS04MzQ5LWExZmU0ZjBmZWZmZiIsICJ2YWxpZGF0b3JzIjogWyJ0ZXN0QGdtYWlsLmNvbSJdLCAia2V5IjogIlN0YXR1cyIsICJ2YWx1ZSI6ICJXb24sIHlvdSdyZSBnb29kISIsICJjb250ZXh0IjogeyJiZHJJZCI6IHsiaWQiOiB7InJlZiI6IDEyMzQsICJ0ZXN0IjogInRlc3QifSwgImxhYmVsIjogIkFCQyJ9LCAiaWQiOiAxLCAibmFtZSI6ICJEZWFsIDEiLCAib3duZXJfZW1haWwiOiAidGVzdEBnbWFpbC5jb20ifSwgInRyaWdnZXJPblN1Y2Nlc3MiOiB7ImFwaSI6ICJodHRwczovL2FwaS91cGRhdGVEZWFsU3RhdHVzIiwgIm1ldGhvZCI6ICJQT1NUIiwgInBhcmFtcyI6IHsic3RhdHVzIjogIndvbiIsICJkZWFsSWQiOiAiMTIzNCJ9fSwgInN0b3JhZ2UiOiAiaHR0cHM6Ly9sYW1iZGEvZGIvMTIzIiwgInJlZGlyZWN0IjogImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20ifQ=="
    payload = decode_payload(b64payload)
    process_payload(payload=payload)